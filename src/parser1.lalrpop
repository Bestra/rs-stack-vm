use std::str::FromStr;
use ast::{BinaryOperator, Expr, LogicalOperator, Statement};
use value::Value;
use std::collections::HashMap;

// The parser uses a constant pool for all values.  Whenever it finds a new Value it
// puts it into the constant_pool and records its index in the map of constants
grammar<'c>(constants: &'c mut HashMap<String, usize>, constant_pool: &'c mut Vec<Value>);

// These are some helper macros, the actual grammar starts further down
Semi<T>: Vec<T> = { // (0)
    <v:(<T> ";")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = { // (0)
    <v:(<T> ",")*> <e:T?> => match e { // (1)
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

BinaryTier<Op,NextTier>: Box<Expr> = {
    <left: BinaryTier<Op,NextTier>> <operator: Op> <right: NextTier> => Box::new(Expr::Binary{<>}),
    NextTier
};

LogicTier<Op,NextTier>: Box<Expr> = {
    <left: LogicTier<Op,NextTier>> <operator: Op> <right: NextTier> => Box::new(Expr::Logical{<>}),
    NextTier
};

// This is the start of the actual grammar.
pub Program: Statement = {
    Declaration* => Statement::Program { statements: <> },
};

Declaration = {
    VariableDeclaration,
    FunctionDeclaration,
    Statement,
};

VariableDeclaration: Statement = {
    "var" <i: Identifier> <initializer:("=" <LogicOr> )?> ";" => {
        let name = i.to_string();
        Statement::Var { name, initializer }
    }
};

FunctionDeclaration: Statement = {
    "fun" <i: Identifier> "(" <params:(<Identifier> ",")*> <last_param: Identifier?> ")" <body: Block> ";" => {

        let name = i.to_string();
        let parameters = match last_param {
            Some(p) => {
                let mut params = params; params.push(p); params
            }
            None => params
        };

        let p = parameters.into_iter().map(|s| s.to_string()).collect();

        Statement::Function { name, body: Box::new(body), parameters: p }
    }
};

Statement = {
    PrintStatement,
    DebuggerStatement,
    ExprStatement,
    IfStatement,
    WhileStatement,
    ForStatement,
    Block,
};

ExprStatement: Statement = {
    <expression: Expression> ";" => Statement::Expression{<>}
};

DebuggerStatement: Statement = {
    "debugger;" => Statement::Debugger
};

IfStatement: Statement = {
    "if" "(" <i: Expression> ")" <t: Statement> <e:("else" <Statement>)?> "end" => {
        let eb = match e {
            Some(s) => Some(Box::new(s)),
            None => None,
        };
        Statement::If {
            condition: i,
            then_branch: Box::new(t),
            else_branch: eb,
        }
    }
};

WhileStatement: Statement = {
    "while" "(" <e: Expression> ")" <b: Statement> => {
        Statement::While {
            condition: e,
            body: Box::new(b),
        }
    }
};

ForStatement: Statement = {
    "for" "("
        <for_initializer: ForInitializer>
        <for_condition: Expression?> ";"
        <for_increment: Expression?> ")" <for_body: Statement> => {
            let body = match for_increment {
                Some(inc) => {
                    Statement::Block {
                        statements: vec![
                            for_body,
                            Statement::Expression { expression: inc }
                        ]
                    }
                }

                None => for_body,
            };

            let condition = match for_condition {
                None => {
                    let idx = constants.entry("true".to_string()).or_insert_with(|| {
                        let v = Value::Bool(true);
                        let i = constant_pool.len();
                        constant_pool.push(v);
                        i
                    });
                    Box::new(Expr::Literal { value: *idx })
                }
                Some(f) => f,
            };

            let while_body = Statement::While {
                condition: condition,
                body: Box::new(body),
            };

            let output_body = match for_initializer {
                Some(i) => {
                    Statement::Block { statements: vec![i, while_body] }
                }
                None => while_body,
            };

            output_body
        }
};

ForInitializer: Option<Statement> = {
    VariableDeclaration => Some(<>),
    ExprStatement => Some(<>),
    ";" => None,
};

PrintStatement: Statement = {
    "print" <expression: Expression> ";" => Statement::Print{<>}
};

Block: Statement = {
    "{" <statements: Declaration*> "}" => Statement::Block{<>}
};

Expression = {
    Assignment
};

Assignment: Box<Expr> = {
    <name: Identifier> "=" <v: Assignment> => {
        Box::new(Expr::Assign {name: name.to_string(), value: v})
    },
    LogicOr,
};

LogicOr = LogicTier<LogicOrOp, LogicAnd>;
LogicAnd = LogicTier<LogicAndOp, Equality>;
Equality = BinaryTier<EqualityOp, Comparison>;
Comparison = BinaryTier<ComparisonOp, Addition>;
Addition = BinaryTier<AdditionOp, Multiplication>;
Multiplication = BinaryTier<MultiplicationOp, Call>;

LogicOrOp: LogicalOperator = {
    "||" => LogicalOperator::Or,
};

LogicAndOp: LogicalOperator = {
    "&&" => LogicalOperator::And,
};

EqualityOp: BinaryOperator = {
    "!=" => BinaryOperator::BangEq,
    "==" => BinaryOperator::Eq,
};

ComparisonOp: BinaryOperator = {
    ">" => BinaryOperator::Gt,
    ">=" => BinaryOperator::GtEq,
    "<" => BinaryOperator::Lt,
    "<=" => BinaryOperator::LtEq,
};

AdditionOp: BinaryOperator = {
    "+" => BinaryOperator::Plus,
    "-" => BinaryOperator::Minus,
};

MultiplicationOp: BinaryOperator = {
    "*" => BinaryOperator::Star,
};

Call: Box<Expr> = {
    <callee: Primary> <chained_calls:( <Arguments> )*> => {
        let mut e = callee;
        for args in chained_calls {
            e = Box::new(Expr::Call { callee: e, arguments: args })
        }
        e
    }
};

Arguments: Vec<Box<Expr>> = {
    "(" <v:(<Expression> ",")*> <e:Expression?> ")" => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Primary: Box<Expr> = {
    Literal => Box::new(Expr::Literal{value: <>}),
    <i: Identifier> => Box::new(Expr::Variable{name: i.to_string()}),
    "(" <LogicOr> ")"
};

Literal: usize = {
    <s: r"[0-9]+"> => {
        let idx = constants.entry(s.to_string()).or_insert_with(|| {
            let v = Value::Number(i32::from_str(<>).unwrap());
            let i = constant_pool.len();
            constant_pool.push(v);
            i
        });
        *idx
    },
    <s:r#""[^"]*""#> => {
        let literal = s[1..s.len()-1].to_string();
        let idx = constants.entry(literal.clone()).or_insert_with(|| {
            let v = Value::String(literal);
            let i = constant_pool.len();
            constant_pool.push(v);
            i
        });
        *idx
    },
    "true" => {
        let idx = constants.entry("true".to_string()).or_insert_with(|| {
            let v = Value::Bool(true);
            let i = constant_pool.len();
            constant_pool.push(v);
            i
        });
        *idx
    },
    "false" => {
        let idx = constants.entry("false".to_string()).or_insert_with(|| {
            let v = Value::Bool(false);
            let i = constant_pool.len();
            constant_pool.push(v);
            i
        });
        *idx
    },
};


Identifier: &'input str = r"[a-zA-Z][a-zA-Z0-9_]*" => <>;

use std::str::FromStr;
use instruction::{Instruction, Ref, OpCode};
use value::Value;

grammar;

pub Program: Vec<Instruction> = {
    Line*
};

pub Line = {
    Label , Op, Ref, Comment
};

pub Label: Instruction = {
    <i: Identifier> ":" => Instruction::Label(i.to_string())
};

pub Comment: Instruction = {
    <c:r"'[a-z0-9]+'"> => Instruction::Comment(c.to_string())
};

pub Ref: Instruction = {
    "CALL" <i: Identifier> => Instruction::Ref(Ref::Call(i.to_string())),
    "JMP" <i: Identifier> => Instruction::Ref(Ref::Jmp(i.to_string())),
    "JIF" <i: Identifier> => Instruction::Ref(Ref::JmpIf(i.to_string())),
};

Op: Instruction = {
    "ADD" => Instruction::OpCode(OpCode::Add),
    "HALT" => Instruction::OpCode(OpCode::Halt),
    "PUSH" <v: Value> => Instruction::OpCode(OpCode::Push(v)),
    "SUB" => Instruction::OpCode(OpCode::Subtract),
    "MULT" => Instruction::OpCode(OpCode::Multiply),
    "NOT" => Instruction::OpCode(OpCode::Not),
    "AND" => Instruction::OpCode(OpCode::And),
    "OR" => Instruction::OpCode(OpCode::Or),
    "POP" => Instruction::OpCode(OpCode::Pop),
    "DUP" => Instruction::OpCode(OpCode::Dup),
    "ISEQ" => Instruction::OpCode(OpCode::IsEq),
    "ISGT" => Instruction::OpCode(OpCode::IsGt),
    "ISGE" => Instruction::OpCode(OpCode::IsGe),
    "ISLT" => Instruction::OpCode(OpCode::IsLt),
    "LOAD" <i: Address> => Instruction::OpCode(OpCode::Load(i)),
    "STORE" <i: Address> => Instruction::OpCode(OpCode::Store(i)),
    "PRINT" => Instruction::OpCode(OpCode::Print),
    "RET" => Instruction::OpCode(OpCode::Ret),
};

Value = {
  Number,
  Bool,
  String,
};

Number: Value = <s:r"[0-9]+"> => Value::Number(i32::from_str(s).unwrap());
String: Value = <s:r#""[^"]*""#> => {
    let literal = s[1..s.len()-1].to_string();
    Value::String(literal)
};

Bool: Value = {
  "true" => Value::Bool(true),
  "false" => Value::Bool(false),
};
Address: usize = <s:r"[0-9]+"> => usize::from_str(s).unwrap();
Identifier: &'input str = r"[a-zA-Z][a-zA-Z0-9_]*" => <>;
